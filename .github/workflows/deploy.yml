name: 'Deploy workload(s)'

on:
  workflow_dispatch:
    inputs:
      workload:
        description: 'The workload to deploy'
        required: true
        type: choice
        options:
          - Sparrow
          - Thunderdome
      env:
        description: 'The environment to target'
        required: false
        default: sbx
        type: choice
        options:
          - sbx
          - dev
          - int
          - prd
      continuousDeployment:
        description: 'Deploy continuously throught the environments'
        required: false
        type: boolean
        default: true
      whatIf:
        description: 'Run the deployment in what-if mode'
        required: false
        type: boolean
        default: false

jobs:
  job_initialize_pipeline:
    runs-on: ubuntu-latest
    name: "Initialize pipeline"
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 'Process deployment configuration'
        id: process-deployment-configuration
        shell: pwsh
        run: |
          switch ('${{ inputs.env }}') {
              'sbx' { $environmentsToTarget = $continuousDeployment ? @('sbx', 'dev', 'int', 'prd') : @('sbx') }
              'dev' { $environmentsToTarget = $continuousDeployment ? @('dev', 'int', 'prd') : @('dev') }
              'int' { $environmentsToTarget = $continuousDeployment ? @( 'int', 'prd') : @('int') }
              'prd' { $environmentsToTarget = @('sbx') }
          }

          $environmentsToTarget | ForEach-Object {
              @{
                  name = $_
              }
          } | ConvertTo-Json -Compression None

          if($environmentsToTarget -notmatch "\[.*\]") {
            $environmentsToTarget = "[$environmentsToTarget]"
          }
          Write-Verbose "Publishing output: $environmentsToTarget" -Verbose
          Write-Output ('{0}={1}' -f 'environmentsToTarget', $environmentsToTarget) >> $env:GITHUB_OUTPUT
    outputs:
      environmentsToTarget: ${{ steps.process-deployment-configuration.outputs.environmentsToTarget }}

  job_deploy_to_environment:
    name: "Deploy to environment [${{ matrix.environments.name }}]"
    permissions:
      id-token: write # For OIDC
    environment: ${{ matrix.environments.name }} # For OIDC
    runs-on: ubuntu-20.04
    needs:
      - job_initialize_pipeline
    strategy:
      fail-fast: false
      matrix:
        environments:  ${{ fromJson(needs.job_initialize_pipeline.outputs.environmentsToTarget) }}
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 'Setup agent'
        shell: pwsh
        run: |
          # Load used functions
          . (Join-Path $env:GITHUB_WORKSPACE '.github' 'scripts' 'Set-EnvironmentOnAgent.ps1')

          # Set agent up
          Set-EnvironmentOnAgent
      - name: "Azure Login - Default"
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_SUBSCRIPTION_ID}}
          subscription-id: ${{ secrets.ARM_TENANT_ID }}
          enable-AzPSSession: true
      - name: 'Deploy workload [${{ inputs.workload }}] to environment [${{ inputs.env }}]'
        shell: pwsh
        run: |
          # Load used functions
          . (Join-Path $env:GITHUB_WORKSPACE '.github' 'scripts' 'New-TemplateDeployment.ps1')

          $functionInput = @{
            TemplateFilePath           = Join-Path $env:GITHUB_WORKSPACE 'solutions' '${{ inputs.workload }}' 'main.bicep'
            TemplateParameterFilePath  = Join-Path $env:GITHUB_WORKSPACE 'solutions' '${{ inputs.workload }}' 'environmentParameters' '${{ inputs.env }}.bicepparam'
          }

          if(${{ inputs.whatIf }}) {
            $functionInput.WhatIf = $true
          }

          Write-Verbose "Invoke task with" -Verbose
          Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

          # Invoke deployment
          New-TemplateDeployment @functionInput -Verbose

